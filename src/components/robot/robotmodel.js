// import React, { useRef, useEffect } from "react";
// import { useGLTF, Box, Circle } from "@react-three/drei";
// import { useRecoilValue } from "recoil";
// import * as THREE from "three";
// import gsap from "gsap";
// import { IsEnteredAtom } from "../../atom/atom"; // 올바른 경로로 수정

// const colors = {
//   boxMaterialColor: "#0C0400", // 초기 색상
// };

// export function Model(props) {
//   const isEntered = useRecoilValue(IsEnteredAtom);
//   const { scene } = useGLTF("/models2/dancer.glb");
//   const dancerRef = useRef(null);
//   const boxRef = useRef(null);

//   useEffect(() => {
//     if (!isEntered) return;

//     scene.traverse((obj) => {
//       if (obj.isMesh) {
//         obj.castShadow = true;
//         obj.receiveShadow = true;
//       }
//     });
//   }, [isEntered, scene]);

//   useEffect(() => {
//     if (!isEntered) return;

//     gsap.fromTo(
//       colors,
//       { boxMaterialColor: "#0C0400" },
//       {
//         duration: 2.5,
//         boxMaterialColor: "#DC4F00",
//       }
//     );
//   }, [isEntered]);

//   if (!isEntered) {
//     return null;
//   }

//   return (
//     <>
//       <primitive ref={dancerRef} object={scene} scale={0.05} />
//       <ambientLight intensity={2} />
//       <Box ref={boxRef} position={[0, 0, 0]} args={[100, 100, 100]}>
//         <meshStandardMaterial
//           color={colors.boxMaterialColor}
//           side={THREE.DoubleSide}
//         />
//       </Box>
//       <Circle
//         castShadow
//         receiveShadow
//         args={[8, 32, 32]}
//         rotation-x={-Math.PI / 2}
//         position-y={-4.4}
//       >
//         <meshStandardMaterial
//           color={colors.boxMaterialColor}
//           side={THREE.DoubleSide}
//         />
//       </Circle>
//     </>
//   );
// }

// useGLTF.preload("/models2/dancer.glb");

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/models/robot.glb -o src/components/robot/robot.js 
*/
import React, { useRef, useState, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";

export function Model(props) {
  // 애니메이션 상태 관리
  const groupRef = useRef();

  const { nodes, materials, animations } = useGLTF("/robot.glb");
  const robotRef = useRef(null); // 댄서 모델에 대한 참조

  console.log(nodes); // nodes 객체를 콘솔에 출력

  const { actions } = useAnimations(animations, robotRef);

  useEffect(() => {
    // 애니메이션이 있는지 확인
    if (animations && animations.length > 0) {
      console.log("애니메이션이 있습니다:", actions);
    } else {
      console.log("애니메이션이 없습니다.");
    }

    // 사용 가능한 애니메이션 이름을 콘솔에 출력
    console.log("Available Actions:", actions);

    // 기본 애니메이션 이름으로 변경
    // const defaultAction = actions[currentAnimation]; // 여기에 기본 애니메이션의 이름을 입력
    // if (defaultAction) {
    //   defaultAction.play(); // 기본 애니메이션 재생
    //   console.log("실행");
    // }
  }, [actions, animations]);

  // 메쉬가 존재하는지 확인 후 렌더링
  if (!nodes.sphere_body) return null; // sphere_body가 없는 경우 null 반환

  return (
    <group ref={groupRef} {...props} dispose={null}>
      <mesh
        geometry={nodes.bottomBun.geometry}
        material={materials.BunMaterial}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.meat.geometry}
        material={materials.SteakMaterial}
        position={[0, 2.82, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cheese.geometry}
        material={materials.CheeseMAterial}
        position={[0, 3.03, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.topBun.geometry}
        material={materials.BunMaterial}
        position={[0, 1.77, 0]}
      />
    </group>
  );
}

useGLTF.preload("/robot.glb");
