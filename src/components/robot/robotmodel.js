/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/models/robot.glb -o src/components/robot/robot.js 
*/
import React, { useRef, useState, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";

export function Model(props) {
  // 애니메이션 상태 관리
  const [currentAnimation, setCurrentAnimation] = useState("get"); // 현재 애니메이션 상태

  const { nodes, materials, animations } = useGLTF("models/robotY.glb"); // useGLTF Hook으로 모델링 로드
  const robotRef = useRef(null); // 댄서 모델에 대한 참조

  console.log(nodes); // nodes 객체를 콘솔에 출력

  const { actions } = useAnimations(animations, robotRef);

  useEffect(() => {
    // 애니메이션이 있는지 확인
    if (animations && animations.length > 0) {
      console.log("애니메이션이 있습니다:", actions);
    } else {
      console.log("애니메이션이 없습니다.");
    }

    // 사용 가능한 애니메이션 이름을 콘솔에 출력
    console.log("Available Actions:", actions);

    // 기본 애니메이션 이름으로 변경
    const defaultAction = actions[currentAnimation]; // 여기에 기본 애니메이션의 이름을 입력
    if (defaultAction) {
      defaultAction.play(); // 기본 애니메이션 재생
      console.log("실행");
    }
  }, [actions, animations]);

  // 메쉬가 존재하는지 확인 후 렌더링
  if (!nodes.sphere_body) return null; // sphere_body가 없는 경우 null 반환

  return (
    <group ref={robotRef} {...props} dispose={null}>
      <group name="Scene">
        <mesh
          name="sphere_body"
          geometry={nodes.sphere_body.geometry}
          material={materials.sphere_color}
        />
      </group>
    </group>
  );
}

useGLTF.preload("models/robotY.glb");
